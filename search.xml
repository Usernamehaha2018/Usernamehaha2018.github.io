<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>不知道说什么随便打个字吧</title>
    <url>/2022/03/28/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%B4%E4%BB%80%E4%B9%88%E9%9A%8F%E4%BE%BF%E6%89%93%E4%B8%AA%E5%AD%97%E5%90%A7/</url>
    <content><![CDATA[<h1 id="水一水"><a href="#水一水" class="headerlink" title="水一水"></a>水一水</h1>]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>C++日常学习笔记</title>
    <url>/2022/03/28/C-%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="has-a-关系"><a href="#has-a-关系" class="headerlink" title="has-a 关系"></a>has-a 关系</h2><p>本文来自C++ Primer Plus-14章</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">typedef</span> std::valarray&lt;<span class="type">double</span>&gt; Score;</span><br><span class="line">        std::string name;</span><br><span class="line">        Score score;</span><br><span class="line">        <span class="type">int</span> first_score;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Student</span> (): <span class="built_in">name</span>(<span class="string">&quot;Null student&quot;</span>), <span class="built_in">score</span>()&#123;&#125;</span><br><span class="line">        <span class="built_in">Student</span>(<span class="type">const</span> std::string name):<span class="built_in">name</span>(name)&#123;&#125;</span><br><span class="line">        <span class="built_in">Student</span>(<span class="type">const</span> std::string name, <span class="type">double</span>* score, <span class="type">int</span> n):<span class="built_in">name</span>(name), <span class="built_in">score</span>(score, n), <span class="built_in">first_score</span>(<span class="keyword">this</span>-&gt;score[<span class="number">0</span>])&#123;&#125;</span><br><span class="line">        <span class="comment">// explicit Student(int n): score(n)&#123;&#125;</span></span><br><span class="line">        <span class="built_in">Student</span>(<span class="type">int</span> n): <span class="built_in">score</span>(n)&#123;&#125;</span><br><span class="line">        <span class="type">double</span> <span class="keyword">operator</span>[](<span class="type">int</span> i)<span class="type">const</span>;</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">get_score</span><span class="params">()</span></span>;</span><br><span class="line">    	ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="type">const</span> Student &amp;stu);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>复习点：初始化&amp;&amp;operator的使用；（为什么声明要用“&amp; &lt;&lt;”？）</p>
<p>注意点：explicit关键字的作用；Student类初始化的调用顺序严格按照定义顺序执行，譬如更改first_score的位置将会编译通过但赋值时引起段错误。</p>
<h2 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h2><p>派生类不会继承基类的接口，但是可以自己类内调用他们，使用类名和作用域解析操作符。这样可以提供没有名称的子对象成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现私有继承示例 不写private效果相同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:<span class="keyword">private</span> std::string, <span class="keyword">private</span> std::valarray&lt;<span class="type">double</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">typedef</span> std::valarray&lt;<span class="type">double</span>&gt; Score;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Student</span> (): std::<span class="built_in">string</span>(<span class="string">&quot;Null student&quot;</span>), <span class="built_in">Score</span>()&#123;&#125;</span><br><span class="line">        <span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name):std::<span class="built_in">string</span>(name)&#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">get_name</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">const</span> std::string <span class="title">get_name</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">Student::get_name</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span>* s = <span class="keyword">new</span> <span class="built_in">char</span>(std::string::<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(s, std::string::<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回基类对象的方法，测试用</span></span><br><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">Student::get_name</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">const</span> std::string &amp;)*<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方</span></span><br><span class="line">   Student* s = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;tes1&quot;</span>);</span><br><span class="line">   std::cout&lt;&lt;s-&gt;<span class="built_in">get_name</span>()&lt;&lt;std::endl;</span><br></pre></td></tr></table></figure>



<p>如果多个基类实现了相同方法，可以强制转换类型。</p>
<p>考虑下面的情况：由一个A类派生出B类和C类，然后D类继承了B类和C类。我们就拥有了两个A类的对象。</p>
<p>考虑语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">D d;</span><br><span class="line">A* a = &amp;d;	<span class="comment">// ‘A’ is an ambiguous base of ‘D’</span></span><br><span class="line">A* a = (B*)&amp;d;	<span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<p>为了解决我们实际上有两个A 类的问题（根本就不需要两个A啊喂），现在就引入虚基类，这样就只有一个对象了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当当当</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">public</span> <span class="keyword">virtual</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:<span class="keyword">public</span> B, <span class="keyword">public</span> C&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* a = &amp;d;	<span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<p>于是又引入了新的问题，我们很可能在B类和C类的实现初始化A类，这样在new D类的时候引入了多重的初始化。为了避免冲突，如果是虚拟基类，C++将ban这条路径，你是不会通过编译的. 除非你显示的在D类中<code> D():A(), B(), C()</code></p>
<p>混合使用虚基类和基类的例子又如何呢？答案应该和你猜的差不多：混合的共享一个基类对象，非混合的各用各的。最后再提一下优先级的问题，我们在调用看起来冲突的方法时，如果一个方法是继承偏序集中的霸王，他的优先级就更低一些。如果不可比，才会引起二义性。</p>
<h2 id="使用模板类"><a href="#使用模板类" class="headerlink" title="使用模板类"></a>使用模板类</h2><p>在开始今天的内容之前，回忆一下之前的模板内容，经过objdump可以发现模板函数在被实例化以前是没有相应的代码的。可以回顾编译原理以了解发生了什么。</p>
<p>我们可以在类模板中为类型参数提供默认值,也可以在函数模板中提供默认值；和调用时的规定一样，如果一个模板参数使用默认值，则它后面的所有参数都必须使用默认值。</p>
<p>模板类貌似这章也没什么好说的，可以自己在类内类外分别声明模板类试一试</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TT&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">beta</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">hold</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    hold&lt;TT&gt; q;</span><br><span class="line">    <span class="built_in">beta</span>(TT t):<span class="built_in">q</span>(t)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TT&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">beta</span>&lt;TT&gt;::hold&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    V v;</span><br><span class="line">    <span class="built_in">hold</span>(V v):<span class="built_in">v</span>(v)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TT&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="type">void</span> beta&lt;TT&gt;:: hold&lt;V&gt;::<span class="built_in">show</span>()&#123;</span><br><span class="line">    cout&lt;&lt;<span class="keyword">this</span>-&gt;v&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">beta&lt;<span class="type">double</span>&gt; <span class="title">b</span><span class="params">(<span class="number">0.2</span>)</span></span>;</span><br><span class="line">    <span class="comment">// return 0.2</span></span><br><span class="line">    b.q.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板类也可以有友元。友元如何访问模板类？提供参数肯定是不行的，因为没有特定的具体化，你需要显式地把参数声明为模板。友元函数可以通过访问全局对象、创建自己的对象；可以访问静态数据成员。<br>需要了解的有三种友元函数：</p>
<ul>
<li>模板类的非模板友元函数（每个类、对象的友元）</li>
<li>模板类的约束模板友元函数（每个特定模板类的友元）</li>
<li>模板类的非约束模板友元函数（所有类实体化的友元，但只访问特定的对象）</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>月度计划</title>
    <url>/2022/04/10/%E6%9C%88%E5%BA%A6%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="四月计划"><a href="#四月计划" class="headerlink" title="四月计划"></a>四月计划</h2><ul>
<li><input disabled="" type="checkbox"> 推毕设进度</li>
<li><input disabled="" type="checkbox"> 阅读effective C++</li>
<li><input checked="" disabled="" type="checkbox"> 流畅的python&#x2F;head firstjava</li>
<li><input disabled="" type="checkbox"> java mybatis&#x2F;springboot学习</li>
<li><input disabled="" type="checkbox"> 论文{CC{proactive CC &amp;&amp; reactive CC}}</li>
<li><input disabled="" type="checkbox"> 100道leetcode</li>
<li><input disabled="" type="checkbox"> 拿到一个实习（月末前完成就好！）</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>离散数学，我还怕了你不成？</title>
    <url>/2022/03/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%88%91%E8%BF%98%E6%80%95%E4%BA%86%E4%BD%A0%E4%B8%8D%E6%88%90%EF%BC%9F/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
